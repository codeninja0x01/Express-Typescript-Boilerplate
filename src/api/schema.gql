# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Attribute {
  id: ID!
  name: String!
  values: [AttributeValue!]
}

type AttributeValue {
  id: ID!
  name: String!
  attribute: Attribute!
  products: [Product!]
}

type Cart {
  id: ID!
  cartKey: String!
  attribute: String!
  quantity: Int!
  buyNow: Boolean!
  createdAt: DateTime!
  product: Product!
}

input CartInput {
  attribute: String!
  cartKey: String!
  productId: Int!
  quantity: Int!
}

type Category {
  id: ID!
  name: String!
  description: String!
  products(offset: Int!, limit: Int!, orderBy: ORDERBY!, order: ORDER!): [Product!]
  department: Department!
}

type Customer {
  id: ID!
  name: String!
  email: String!
  password: String!
  address1: String!
  address2: String!
  city: String!
  region: String!
  postalCode: String!
  country: String!
  dayPhone: String!
  evePhone: String!
  mobPhone: String!
  creditCard: String!
  shippingRegion: ShippingRegion!
  orders: [Order!]
  reviews: [Review!]
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Department {
  id: ID!
  name: String!
  description: String!
  categories: [Category!]
  products(offset: Int!, limit: Int!, orderBy: ORDERBY!, order: ORDER!): [Product!]
}

type Mutation {
  addCart(order: CartInput!): [Cart!]!
  updateCart(order: CartInput!, cartKey: Float!): [Cart!]!
  removeCart(cartKey: String!): ID!
  removeProductCart(productId: Float!): ID!
  addReview(review: ReviewInput!): Review!
}

type Order {
  id: ID!
  totalAmount: Float!
  shippedOn: DateTime!
  status: Float!
  comments: String!
  authCode: String!
  reference: String!
  createdAt: DateTime!
  customer: Customer!
  tax: Tax!
  shipping: Shipping!
  details: [OrderDetail!]
}

enum ORDER {
  id
  name
}

enum ORDERBY {
  asc
  desc
}

type OrderDetail {
  id: ID!
  attribute: String!
  productName: String!
  quantity: Int!
  unitCost: Float!
  currency: String!
  product: Product!
  order: Order!
}

type Product {
  id: ID!
  name: String!
  description: String!
  price: Float!
  discountedPrice: Float!
  image1: String!
  image2: String!
  thumbnail: String!
  display: Boolean!
  reviews: [Review!]
  orders: [OrderDetail!]
  carts: [Cart!]
  categories: [Category!]
  attributes: [AttributeValue!]
}

type Query {
  attributes: [Attribute!]!
  attribute(id: Float!): Attribute!
  generateCartKey: String!
  getCartProduct(cartKey: String!): [Cart!]!
  getCategories(offset: Int!, limit: Int!, orderBy: ORDERBY!, order: ORDER!): [Category!]!
  getCategory(id: Float!): [Category!]!
  getDepartments: [Department!]!
  getDepartment(id: Float!): [Department!]!
  getProducts(offset: Int!, limit: Int!, orderBy: ORDERBY!, order: ORDER!): [Product!]!
  getProduct(id: Float!): Product!
  searchProduct(offset: Int!, limit: Int!, orderBy: ORDERBY!, order: ORDER!, search: String!, descLength: Int!): [Product!]!
  getShippings: [Shipping!]!
  getRegion(id: Float!): Shipping!
  getTaxs: [Tax!]!
  getTax(id: Float!): Tax!
}

type Review {
  id: ID!
  review: String!
  rating: Int!
  createdAt: DateTime!
  product: Product!
  customer: Customer!
}

input ReviewInput {
  review: String!
  rating: Int!
  productId: Int!
  customerId: Int!
}

type Shipping {
  id: ID!
  type: String!
  cost: Float!
  shippingRegion: ShippingRegion!
}

type ShippingRegion {
  id: ID!
  name: String!
  shippings: [Shipping!]
}

type Tax {
  id: ID!
  type: String!
  percentage: Float!
}
